{
  
    
        "post0": {
            "title": "Classifying Track Bikes Using Neural Networks",
            "content": "This notebook has various goals . document initial attempts at using a CNN to classify track bikes | demonstrate the use of fastai python library to quickly build models | demonstrate the use of fastpages to convert Jupyter notebooks into blog posts | . At the time of writing, please be aware of this bug and do not run v2.2.7 of the fastai library. . All Makes Multi-Class Classfier . Loading and Preparing Data . This dataset was collected by manual scraping various public facebook pages of track day photographers and manually labelling each image. This is a painstaking process hence the lack of scale. . path_all_makes = Path(&quot;/home/nishan/Datasets/TrackBikes/&quot;) . all_makes_db = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.3, seed=42), get_y=parent_label, item_tfms=Resize(128)) . all_makes_dls = all_makes_db.dataloaders(path_all_makes) . all_makes_dls.categorize.vocab . [&#39;aprilia&#39;, &#39;bmw&#39;, &#39;ducati&#39;, &#39;honda&#39;, &#39;kawasaki&#39;, &#39;not_a_bike&#39;, &#39;suzuki&#39;, &#39;triumph&#39;, &#39;yamaha&#39;] . 8 classes of bikes and 1 class of not a bike. Hence this is a multiclass problem. | . pd.Series([all_makes_db.get_y(fpath) for fpath in all_makes_db.get_items(path_all_makes)]).value_counts() . yamaha 106 not_a_bike 66 kawasaki 61 suzuki 43 honda 37 bmw 23 aprilia 19 ducati 18 triumph 13 dtype: int64 . this breakdown is before the random train test split | class imbalance here is representative of reality: yamaha rules on the track! Yamaha makes excellent track bikesw with wide availabilty of parts. European branfs on the other hand such as Triumph or Ducati don&#39;t fare well on the track due to their expensive upkeep. | . all_makes_dls.show_batch() . as one can see it is a hard job to tell one track bike from another, even veterans sometimes have a hard time | there are also riders in the image that really don&#39;t need to be there. | there is one exception, not_a_bike images are clearly distinct | . Train . learner_all_makes = cnn_learner(all_makes_dls, resnet18, metrics=[error_rate, F1Score(average=&quot;weighted&quot;)], lr=0.001) learner_all_makes.fine_tune(20) . epoch train_loss valid_loss error_rate f1_score time . 0 | 3.387504 | 3.434762 | 0.843478 | 0.150317 | 00:07 | . epoch train_loss valid_loss error_rate f1_score time . 0 | 2.458725 | 2.720732 | 0.782609 | 0.238803 | 00:06 | . 1 | 2.288914 | 2.325032 | 0.721739 | 0.297734 | 00:06 | . 2 | 2.100991 | 2.084926 | 0.660870 | 0.350149 | 00:06 | . 3 | 1.928781 | 1.972242 | 0.600000 | 0.390711 | 00:06 | . 4 | 1.728745 | 1.952721 | 0.582609 | 0.403826 | 00:06 | . 5 | 1.554006 | 1.984210 | 0.565217 | 0.418602 | 00:06 | . 6 | 1.371065 | 2.067232 | 0.556522 | 0.425561 | 00:06 | . 7 | 1.210570 | 2.109502 | 0.539130 | 0.447560 | 00:06 | . 8 | 1.068196 | 2.182838 | 0.530435 | 0.452751 | 00:06 | . 9 | 0.949947 | 2.231217 | 0.547826 | 0.439832 | 00:06 | . 10 | 0.855398 | 2.246051 | 0.530435 | 0.464127 | 00:06 | . 11 | 0.767150 | 2.230837 | 0.530435 | 0.464127 | 00:06 | . 12 | 0.687040 | 2.237967 | 0.539130 | 0.457851 | 00:06 | . 13 | 0.617871 | 2.246048 | 0.539130 | 0.457851 | 00:06 | . 14 | 0.560617 | 2.254689 | 0.530435 | 0.466674 | 00:06 | . 15 | 0.511584 | 2.272471 | 0.530435 | 0.466674 | 00:07 | . 16 | 0.473674 | 2.285174 | 0.539130 | 0.454330 | 00:06 | . 17 | 0.434411 | 2.279321 | 0.539130 | 0.454330 | 00:06 | . 18 | 0.396292 | 2.275615 | 0.539130 | 0.455911 | 00:06 | . 19 | 0.365418 | 2.275396 | 0.530435 | 0.461386 | 00:06 | . due to class imbalance, error_rate is perhaps not the best measure of performance | valid_loss is stagnant after epoch 14 while train_loss is decreasing. Hence the model is starting to overfit to the train set after epoch 14 | the weighted f1_score is ~0.46 which is quite bad | . Eval . interp_all_bikes = ClassificationInterpretation.from_learner(learner_all_makes) . interp_all_bikes.print_classification_report() . precision recall f1-score support aprilia 0.40 0.40 0.40 5 bmw 0.11 0.17 0.13 6 ducati 0.00 0.00 0.00 3 honda 0.33 0.19 0.24 16 kawasaki 0.50 0.40 0.44 15 not_a_bike 0.94 0.94 0.94 17 suzuki 0.40 0.25 0.31 16 triumph 0.50 0.33 0.40 3 yamaha 0.45 0.62 0.52 34 accuracy 0.47 115 macro avg 0.40 0.37 0.38 115 weighted avg 0.47 0.47 0.46 115 . interp_all_bikes.plot_confusion_matrix(dpi=100) . the first thing to note is the lack of labelled data in the validation set for some classes for example, ducati has 3 images while yamaha has 34, bmw has 6 | . | not_a_bike class does the best. this means the classifier has indeed figured out what constitutes a motorcycle. This could be because during the training of resnet, one class was actually motorcycle. | suzuki is often confused with yamaha | honda is the most confused of all classes | most bike classes get confused with yamaha | . interp_all_bikes.most_confused(2) . [(&#39;suzuki&#39;, &#39;yamaha&#39;, 9), (&#39;kawasaki&#39;, &#39;yamaha&#39;, 7), (&#39;yamaha&#39;, &#39;bmw&#39;, 4), (&#39;bmw&#39;, &#39;yamaha&#39;, 3), (&#39;honda&#39;, &#39;aprilia&#39;, 3), (&#39;honda&#39;, &#39;bmw&#39;, 3), (&#39;honda&#39;, &#39;kawasaki&#39;, 3), (&#39;yamaha&#39;, &#39;ducati&#39;, 3), (&#39;aprilia&#39;, &#39;yamaha&#39;, 2), (&#39;bmw&#39;, &#39;suzuki&#39;, 2), (&#39;ducati&#39;, &#39;honda&#39;, 2), (&#39;honda&#39;, &#39;yamaha&#39;, 2), (&#39;kawasaki&#39;, &#39;honda&#39;, 2), (&#39;triumph&#39;, &#39;yamaha&#39;, 2), (&#39;yamaha&#39;, &#39;kawasaki&#39;, 2), (&#39;yamaha&#39;, &#39;suzuki&#39;, 2)] . interp_all_bikes.plot_top_losses(9,figsize=(18, 18)) . Challenges in classification . lack of data | the rider adds unnecessary noise | different orientations of the bike | there are genuinely very few features from the bodywork that separate the makes | bike is not always center in the picture | make contains different models R6 R1 just in yamaha for example | . # interp_all_bikes.preds # learner_all_makes.get_preds() # y_probs, y_preds = learner_all_makes.get_preds(dl=dls_all_makes.valid) # y_probs # y_preds # dls_all_makes.valid.vocab # y_preds.where(y_preds == 4, torch.scalar_tensor(0)) # torch.scalar_tensor(0,) # dls_all_makes.valid.categorize? # dls_all_makes.valid.items . Yamaha or Not Multi-Class Classifier . We now try an easier problem, is the trackbike a {Yamaha, Not a Yamaha, Not a bike}. Since we&#39;ve a lot of Yamahas in our labelled dataset, by bunching not Yamahas into one class, hopefully we can alleviate the class imbalance problem. . path_yamaha_binary = Path(&quot;/home/nishan/Datasets/YamahaBinary/&quot;) . yamaha_binary_db = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) # other possible datablocks. Mainly they differ in the transforms applied to the images # bikes = DataBlock( # blocks=(ImageBlock, CategoryBlock), # get_items=get_image_files, # splitter=None, # get_y=parent_label, # item_tfms=Resize(128)) # bikes = bikes.new( # item_tfms=RandomResizedCrop(224, min_scale=0.5), # batch_tfms=aug_transforms()) # bikes = bikes.new( # item_tfms=RandomResizedCrop(224, min_scale=0.5), # batch_tfms=None) # dls = bikes.dataloaders(path_trackbikes) # bikes = bikes.new( # item_tfms=Resize(224, ResizeMethod.Squish), # batch_tfms=aug_transforms()) # bikes = bikes.new( # item_tfms=Resize(224, ResizeMethod.Pad, pad_mode=&#39;zeros&#39;), # batch_tfms=None) . pd.Series([yamaha_binary_db.get_y(fpath) for fpath in yamaha_binary_db.get_items(path_yamaha_binary)]).value_counts() . not_yamaha 224 yamaha 165 not_a_bike 66 dtype: int64 . the value count for yamaha doesn&#39;t align with the previous section because I added more bikes when assembling this dataset | class imbalance is now partially alleviated as we have more not yamahas | . yamaha_binary_dls = yamaha_binary_db.dataloaders(path_yamaha_binary) . yamaha_binary_dls.show_batch(max_n=6, nrows=2) . you can see that the cropping sometimes takes out the bike from the image | . Train . learner_yamaha_binary = cnn_learner(yamaha_binary_dls, resnet18, metrics=[error_rate, F1Score(average=&quot;weighted&quot;)], lr=0.001) learner_yamaha_binary.fine_tune(20) . epoch train_loss valid_loss error_rate f1_score time . 0 | 1.930770 | 1.247743 | 0.329670 | 0.624340 | 00:07 | . epoch train_loss valid_loss error_rate f1_score time . 0 | 1.424345 | 0.862586 | 0.329670 | 0.651071 | 00:07 | . 1 | 1.304576 | 0.737989 | 0.296703 | 0.705542 | 00:07 | . 2 | 1.214939 | 0.711476 | 0.252747 | 0.744928 | 00:07 | . 3 | 1.092670 | 0.700428 | 0.263736 | 0.731569 | 00:07 | . 4 | 0.979581 | 0.731643 | 0.263736 | 0.725127 | 00:07 | . 5 | 0.886004 | 0.733914 | 0.274725 | 0.724728 | 00:07 | . 6 | 0.779175 | 0.749347 | 0.274725 | 0.725338 | 00:07 | . 7 | 0.675493 | 0.742499 | 0.274725 | 0.719206 | 00:07 | . 8 | 0.592519 | 0.745616 | 0.296703 | 0.689342 | 00:07 | . 9 | 0.531942 | 0.762820 | 0.296703 | 0.693753 | 00:07 | . 10 | 0.467197 | 0.800540 | 0.296703 | 0.697521 | 00:07 | . 11 | 0.413226 | 0.844249 | 0.296703 | 0.700701 | 00:07 | . 12 | 0.369834 | 0.868356 | 0.285714 | 0.713129 | 00:07 | . 13 | 0.328100 | 0.861939 | 0.274725 | 0.725338 | 00:07 | . 14 | 0.294613 | 0.849984 | 0.263736 | 0.735216 | 00:07 | . 15 | 0.267953 | 0.865282 | 0.285714 | 0.715429 | 00:07 | . 16 | 0.241579 | 0.875345 | 0.274725 | 0.727325 | 00:07 | . 17 | 0.219295 | 0.864667 | 0.285714 | 0.715429 | 00:07 | . 18 | 0.198167 | 0.866620 | 0.274725 | 0.727325 | 00:07 | . 19 | 0.182071 | 0.863331 | 0.274725 | 0.727325 | 00:07 | . the model now has an accepetable weighted f1_score of around ~0.72 | . Eval . interp_yamaha_binary = ClassificationInterpretation.from_learner(learner_yamaha_binary) . interp_yamaha_binary.plot_confusion_matrix(dpi=100) . interp_yamaha_binary.print_classification_report() . precision recall f1-score support not_a_bike 0.93 1.00 0.96 13 not_yamaha 0.79 0.73 0.76 51 yamaha 0.53 0.59 0.56 27 accuracy 0.73 91 macro avg 0.75 0.77 0.76 91 weighted avg 0.73 0.73 0.73 91 . its still challenging to predict a yamaha for a yamaha. the precision and recall for yamaha class is the worst | not a bike class is the easiest and brings up the weighted f1 score. | not_yamaha precision and recall are acceptable | . interp_yamaha_binary.plot_top_losses(9, nrows=3, figsize=(18, 18)) . how much does the rider affect the model? | . Production Demo . For a quick interactive demo of the model, launch binder or see this repo for more information. . Conclusion and Future Work . [ ] TODO settle on a consistent set of image transforms | [ ] TODO remove rider from the image | [ ] TODO collect more data | .",
            "url": "https://nahsin.github.io/musings/fastpages/jupyter/2021/03/22/Classifying-Track-Bikes.html",
            "relUrl": "/fastpages/jupyter/2021/03/22/Classifying-Track-Bikes.html",
            "date": " • Mar 22, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Math Equations Support",
            "content": "Corolla vs Ferrari . Imagine racing your car against an F1 car. Your car has speed $100~km/h$ while the F1 car has speed //(300~km/h ). The race director decides to show mercy and gives your car a head start. How long will it take for the F1 car to catch up to you? . Denote $t_0$ as the head start given to your car. Your car travels a distance $d$ as, begin{equation} label{eq:car} d = 100t, end{equation} . and the F1 car will travel that same distance as, begin{equation} label{eq:f1} d = 300(t - t_0). end{equation} . Substituting eqref{eq:car} into eqref{eq:f1} and solving for $t$ gives begin{aligned} 100t &amp;= 300(t - t_0), 200t &amp;= 300t_0, label{eq:t} t &amp;= frac{3}{2}t_0. end{aligned} . Now, let’s do a drag race! Let the drag strip be a $1~km$ long straight. What is the head start your car requires to tie or win the race? . Substituting eqref{eq:t} into eqref{eq:car}, we’ve begin{equation} label{eq:d} d = 150t_0. end{equation} We plug in the numbers to get $t_0 = 1/150~h = 24~s$. Therefore, your car needs to have a head start of at least $24~s$ to tie or win. .",
            "url": "https://nahsin.github.io/musings/2020/05/17/math-equations-support.html",
            "relUrl": "/2020/05/17/math-equations-support.html",
            "date": " • May 17, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nahsin.github.io/musings/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nahsin.github.io/musings/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Stop ssh/sshfs from hanging up your applications",
            "content": "For my work, I need to keep multiple ssh and sshfs tunnels open. After an upgrade to Ubuntu 16.04, my ssh tunnels started to hang after some period of inactivity. Now if a ssh tunnel hangs, all one has to do is close the terminal. So inconvenient but managable. But if a sshfs tunnel hangs, then a simple ls command can hang the terminal. Or if you are using Nautilus (file manager), simply trying to browse to the mounted folder will cause a hang making you force quit the application. Lastly, desperation kicks in and you now try to force a umount, but OS will complain saying some resource is busy. To summarize, I am forced to restart every time a sshfs tunnel hangs which is really annoying. . To resolve this issue for ssh, we use the option ServerAliveInterval. Quoting from the man page of ssh_config, . ServerAliveInterval Sets a timeout interval in seconds after which if no data has been received from the server, ssh(1) will send a message through the encrypted channel to request a response from the server. The default is 0, indicating that these messages will not be sent to the server, or 300 if the BatchMode option is set. ProtocolKeepAlives and SetupTimeOut are Debian-specific compati- bility aliases for this option. . Therefore, either modify your ssh_config file or use the following command . ssh -o ServerAliveInterval=300 user@machine-name . So far, 300 = 5 minutes has served me well. Experiment with the value to find one that works for you. . For sshfs, use the following command . sshfs user@machine-name -o ServerAliveInterval=300 mount-path .",
            "url": "https://nahsin.github.io/musings/2016/05/22/ssh-sshfs-stop-hanging.html",
            "relUrl": "/2016/05/22/ssh-sshfs-stop-hanging.html",
            "date": " • May 22, 2016"
        }
        
    
  
    
        ,"post5": {
            "title": "Google Now vs Siri",
            "content": "So when it comes to artificial intelligence, who is smarter, Apple’s Siri or Google Now? There are two components to this question; voice/language recognition and data mining. As one might expect, Google is the clear winner in the data mining category. But as the following list of questions shows, Google Now also possess vastly superior voice recognition traits. On the other hand, Siri could not even understand most of these questions by voice, and even if it did or I typed them, the result was a simple Bing search. So try them out yourself. . Who is the queen of Jordan? | Status of flight 9W229 | Who is Manmohan Singh? | When was Manmohan Singh the finance minister of India? | Who is Guru Gobind Singh? | What is Sikhism? | Who was the third guru of Sikhism? | Birthday of Nehru? | When did the US gain it’s independence from Britain? | When did Angela Merkel become the Chancellor of Germany? | How long did the British rule India? | . Now one can argue that Siri is not really meant for yielding useful information. It’s only good for calling, sending messages, setting reminders and answering stupid questions with stupid answers at a party. But except the last mundane point, Google Now also does the same job but way better. So as it stands now, sorry Siri, you suck and I really miss my Nexus 4 :(. Oh I should also mention, Google Now has way more spoken languages than Siri including English (India) complete with best Indian accent I have heard from a machine. . Lastly, if you got thirty minutes to spare, watch this video comparison between Google Now, Siri and Cortana. . Peace out, . Nishan .",
            "url": "https://nahsin.github.io/musings/2015/12/13/siri-vs-googlenow.html",
            "relUrl": "/2015/12/13/siri-vs-googlenow.html",
            "date": " • Dec 13, 2015"
        }
        
    
  
    
        ,"post6": {
            "title": "First Post",
            "content": "As tradition dictates for a first post, . Hello World! . print ‘Hello World!’ . printf(“Hello World!”) . write(6,*) “Hello World” .",
            "url": "https://nahsin.github.io/musings/2015/12/13/first-post.html",
            "relUrl": "/2015/12/13/first-post.html",
            "date": " • Dec 13, 2015"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nahsin.github.io/musings/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nahsin.github.io/musings/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}